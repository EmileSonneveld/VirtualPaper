#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014 Audiokinetic Inc. / All Rights Reserved
//
//////////////////////////////////////////////////////////////////////

using UnityEngine;
using System;
using System.Collections.Generic;

public abstract class AkUnityEventHandler : MonoBehaviour 
{
    public const int AWAKE_TRIGGER_ID   = 1151176110;
    public const int START_TRIGGER_ID   = 1281810935;
    public const int DESTROY_TRIGGER_ID = unchecked((int)3936390293);

	//Shared 
    public bool useOtherObject = true;
	
	//2014.1 BETA 2
	public int triggerMask;
	
	//Used by AkUnityEventHandlerInspector
	public const int AWAKE_TRIGGER_BIT		= 1;
	public const int START_TRIGGER_BIT		= 2;
	public const int DESTROY_TRIGGER_BIT	= 4;
	public const int RESERVED_BITS			= 3;	
	public const int MAX_NB_TRIGGERS		= 32;	

	// 2014.1 Final
    public List<int> triggerList = new List<int>();

	//Needed  for AkAmbient
	public virtual void HandleEvent(GameObject in_gameObject){}
	protected virtual void OnDestroy(){}
	protected virtual void Awake() {}
	protected virtual void Start() {}
	protected void RegisterTriggers(List<int> in_triggerMask, AkTriggerBase.Trigger in_delegate) {}
	protected void UnregisterTriggers(List<int> in_triggerMask, AkTriggerBase.Trigger in_delegate) {}
	
	public virtual void Migrate()
	{
        List<Type> oldTriggers = AkTriggerBase.GetAllDerivedTypesTheOldWay();
		Dictionary<uint, string> newTriggers = AkTriggerBase.GetAllDerivedTypes ();
		
		for(int i = 0; i < oldTriggers.Count; i++)
		{
			if((triggerMask & (1 << (i + RESERVED_BITS))) != 0)
			{
				foreach (KeyValuePair<uint, string> pair in newTriggers)
				{
					if (pair.Value == oldTriggers[i].Name)
					{
						triggerList.Add((int)pair.Key);
						break;
					}
				}
			}
		}
		
		if( (triggerMask & AWAKE_TRIGGER_BIT) != 0 )
		{
			triggerList.Add(AWAKE_TRIGGER_ID);
		}
		
		if( (triggerMask & START_TRIGGER_BIT) != 0 )
		{
			triggerList.Add(START_TRIGGER_ID);
		}
		
		if( (triggerMask & DESTROY_TRIGGER_BIT) != 0 )
		{
			triggerList.Add(DESTROY_TRIGGER_ID);
		}
	}
}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
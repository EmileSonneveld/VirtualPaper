#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014 Audiokinetic Inc. / All Rights Reserved
//
//////////////////////////////////////////////////////////////////////
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

/// Base class for the generic triggering mechanism for Wwise Integration.
/// All Wwise components will use this mechanism to drive their behavior.
/// Derive from this class to add your own triggering condition, as decribed in \ref unity_add_triggers
public abstract class AkTriggerBase : MonoBehaviour 
{
	public delegate void Trigger(
	GameObject in_gameObject ///< in_gameObject is used to pass "Collidee" objects when Colliders are used.  Some components have the option "Use other object", this is the object they'll use.
	);
	
	/// All components reacting to the trigger will be registered in this delegate.
	public Trigger triggerDelegate = null;  

	public static List<Type> GetAllDerivedTypes()
	{

		Type	baseType	= typeof(AkTriggerBase);        
#if UNITY_METRO && !UNITY_EDITOR        
        IEnumerable<TypeInfo> typeInfos = baseType.GetTypeInfo().Assembly.DefinedTypes;
#else
        Type[]  types       = baseType.Assembly.GetTypes(); // THIS WORKS ON WP8, not on Metro
#endif
		
		List<Type> derivedTypes = new List<Type>();
		
#if UNITY_METRO && !UNITY_EDITOR        
 		foreach(TypeInfo typeInfo in typeInfos)
		{
            if(typeInfo.IsClass && (typeInfo.IsSubclassOf(baseType) || baseType.GetTypeInfo().IsAssignableFrom(typeInfo) && baseType != typeInfo.GetType()))
            {
				derivedTypes.Add(typeInfo.AsType());
			}
		}
#else
        for (int i = 0; i < types.Length; i++)
		{
            if (types[i].IsClass && (types[i].IsSubclassOf(baseType) || baseType.IsAssignableFrom(types[i]) && baseType != types[i]))
            {
				derivedTypes.Add(types[i]);
			}
		}
#endif
		
		return derivedTypes;
	}

	public virtual void Migrate() {}
} 

#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.